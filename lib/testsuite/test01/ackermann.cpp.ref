#include <cstdio>
#include <cstdlib> /* atoi() */


static unsigned int called;


unsigned int naive_ackermann(unsigned int m, unsigned int n) {
    called++;
    if (m == 0)
        return n + 1;
    else if (n == 0)
        return naive_ackermann(m - 1, 1);
    else
        return naive_ackermann(m - 1, naive_ackermann(m, n - 1));
}


unsigned int iterative_ackermann(unsigned int m, unsigned int n) {
    called++;
    while (m != 0) {
        if (n == 0) {
            n = 1;
        } else {
            n = iterative_ackermann(m, n - 1);
        }
        m--;
    }
    return n + 1;
}


unsigned int formula_ackermann(unsigned int m, unsigned int n) {
    called++;
    while(1) {
        switch(m) {
        case 0:  return n + 1;
        case 1:  return n + 2;
        case 2:  return (n << 1) + 3;
        case 3:  return (1 << (n+3)) - 3;
        default:
            if (n == 0) {
                n = 1;
            } else {
                n = formula_ackermann(m, n - 1);
            }
            m--;
            break;
        }
    }
}


int main(int argc, char* argv[]) {
    unsigned int m, n, result;

    m = rand() % 4 + 1;
    n = rand() % 3 + 1;

    called = 0;
    result = naive_ackermann(m, n);
    printf("Naive:     %u (%u calls)\n", result, called);

    called = 0;
    result = iterative_ackermann(m, n);
    printf("Iterative: %u (%u calls)\n", result, called);

    called = 0;
    result = formula_ackermann(m, n);
    printf("Formula:   %u (%u calls)\n", result, called);

    return 0;
}

